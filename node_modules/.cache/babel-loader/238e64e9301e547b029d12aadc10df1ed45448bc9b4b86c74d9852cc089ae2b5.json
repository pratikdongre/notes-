{"ast":null,"code":"var _jsxFileName = \"/home/prat/Desktop/notes/src/components/Webpage View/WebNotes.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from '../Webpage View/WebNotesApp.module.css';\nimport lock from '../../assets/Vector.png';\nimport bgImage from '../../assets/bgimage.png';\nimport createGroupIcon from '../../assets/+.png';\nimport saveIcon from '../../assets/save.png';\nimport Popup from '../Webpage View/Popup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WebNotes = () => {\n  _s();\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [groupName, setGroupName] = useState('');\n  const [selectedColor, setSelectedColor] = useState('#B38BFA');\n  const [noteGroups, setNoteGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [newNoteContent, setNewNoteContent] = useState('');\n  const [selectedGroupIndex, setSelectedGroupIndex] = useState(null);\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n  const createNotesGroup = () => {\n    if (groupName && selectedColor) {\n      const newNoteGroup = {\n        name: groupName,\n        color: selectedColor,\n        notes: []\n      };\n\n      // Assign background color based on the first two letters of the group name\n      const bgColor = groupName.substring(0, 2).toUpperCase();\n      newNoteGroup.backgroundColor = bgColor;\n\n      // Create a copy of noteGroups with the new group\n      const updatedNoteGroups = [...noteGroups, newNoteGroup];\n\n      // Update the state with the new array\n      setNoteGroups(updatedNoteGroups);\n      closePopup();\n      setGroupName('');\n      setSelectedColor('#B38BFA');\n    }\n  };\n  const selectGroup = (group, index) => {\n    console.log('Selected Group Index:', index);\n    setSelectedGroup(group);\n    setSelectedGroupIndex(index);\n    updateLocalStorage(noteGroups);\n  };\n  const updateLocalStorage = updatedNoteGroups => {\n    localStorage.setItem('noteGroups', JSON.stringify(updatedNoteGroups));\n  };\n  const createNote = noteContent => {\n    if (selectedGroup) {\n      const timestamp = new Date();\n      const formattedTime = timestamp.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      const formattedDate = timestamp.toLocaleDateString([], {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      const noteTimestamp = `${formattedTime} <br/> ${formattedDate}`;\n      const newNote = {\n        updatedAt: noteTimestamp,\n        content: noteContent\n      };\n\n      // Create a copy of notes for the selected group with the new note\n      const updatedNotes = [...selectedGroup.notes, newNote];\n\n      // Update the state with the new notes\n      setSelectedGroup({\n        ...selectedGroup,\n        notes: updatedNotes\n      });\n\n      // Save the updated notes to local storage\n      const updatedNoteGroups = noteGroups.map(group => {\n        if (group === selectedGroup) {\n          return {\n            ...group,\n            notes: updatedNotes\n          };\n        }\n        return group;\n      });\n\n      // Update noteGroups state and save to local storage\n      setNoteGroups(updatedNoteGroups);\n      updateLocalStorage(updatedNoteGroups);\n    }\n    setNewNoteContent(''); // Clear the input field after saving\n  };\n\n  function generateCircleWithInitials(group) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.circleWrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: group.color\n        },\n        className: styles.initialCircle,\n        children: group.name.includes(' ') ? group.name.split(' ').map(word => word.slice(0, 1)).join('').toUpperCase() : group.name.slice(0, 2).toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n  const handleNoteSave = () => {\n    if (newNoteContent.trim() !== '') {\n      createNote(newNoteContent); // Call the function to create a new note\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatApp,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.noteGroups,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: openPopup,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: createGroupIcon,\n            alt: \"Create Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), \"Create Notes group\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: styles.groupList,\n          children: noteGroups.map((group, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `${styles.groupItem} ${index === selectedGroupIndex ? styles.selectedGroup : ''}`,\n            onClick: () => selectGroup(group, index),\n            children: [generateCircleWithInitials(group), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.groupNameTransparent,\n              children: group.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.Content,\n      children: isPopupOpen ?\n      /*#__PURE__*/\n      // Render popup content when isPopupOpen is true\n      _jsxDEV(Popup, {\n        isPopupOpen: isPopupOpen,\n        closePopup: closePopup,\n        groupName: groupName,\n        setGroupName: setGroupName,\n        selectedColor: selectedColor,\n        setSelectedColor: setSelectedColor,\n        createNotesGroup: createNotesGroup\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }, this) : selectedGroup ?\n      /*#__PURE__*/\n      // Render selected group content when a group is selected\n      _jsxDEV(\"div\", {\n        className: styles.rightContent,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.logo,\n          children: generateCircleWithInitials(selectedGroup)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedGroup.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: styles.noteList,\n          children: selectedGroup.notes.map((note, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: styles.noteItem,\n            children: [note.content, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                dangerouslySetInnerHTML: {\n                  __html: note.updatedAt\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: styles.noteTextArea,\n          contentEditable: \"true\",\n          placeholder: \"   Enter your text here...........\",\n          value: newNoteContent,\n          onChange: e => setNewNoteContent(e.target.value),\n          onKeyPress: e => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              handleNoteSave();\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.saveButton,\n          onClick: handleNoteSave,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: saveIcon,\n            alt: \"Save Note\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      // Render default content when neither popup is open nor a group is selected\n      _jsxDEV(\"div\", {\n        className: styles.defaultContent,\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: bgImage,\n          alt: bgImage,\n          className: styles.bgImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.pocketnotes,\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: styles.description,\n          children: [\"Send and receive Texts without keeping your phone online.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 15\n          }, this), \"Use Pocket Notes on up to 4 linked devices and 1 mobile phone\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.FooterContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: lock,\n            alt: \"lock\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"end-to-end encrypted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n_s(WebNotes, \"cVNu/+0IQO6E05TK1r8YIYyFPoM=\");\n_c = WebNotes;\nexport default WebNotes;\nvar _c;\n$RefreshReg$(_c, \"WebNotes\");","map":{"version":3,"names":["React","useState","styles","lock","bgImage","createGroupIcon","saveIcon","Popup","jsxDEV","_jsxDEV","WebNotes","_s","isPopupOpen","setIsPopupOpen","groupName","setGroupName","selectedColor","setSelectedColor","noteGroups","setNoteGroups","selectedGroup","setSelectedGroup","newNoteContent","setNewNoteContent","selectedGroupIndex","setSelectedGroupIndex","openPopup","closePopup","createNotesGroup","newNoteGroup","name","color","notes","bgColor","substring","toUpperCase","backgroundColor","updatedNoteGroups","selectGroup","group","index","console","log","updateLocalStorage","localStorage","setItem","JSON","stringify","createNote","noteContent","timestamp","Date","formattedTime","toLocaleTimeString","hour","minute","formattedDate","toLocaleDateString","year","month","day","noteTimestamp","newNote","updatedAt","content","updatedNotes","map","generateCircleWithInitials","className","circleWrapper","children","style","initialCircle","includes","split","word","slice","join","fileName","_jsxFileName","lineNumber","columnNumber","handleNoteSave","trim","chatApp","button","onClick","src","alt","groupList","groupItem","groupNameTransparent","Content","rightContent","logo","noteList","note","noteItem","dangerouslySetInnerHTML","__html","noteTextArea","contentEditable","placeholder","value","onChange","e","target","onKeyPress","key","shiftKey","preventDefault","saveButton","defaultContent","pocketnotes","description","FooterContainer","_c","$RefreshReg$"],"sources":["/home/prat/Desktop/notes/src/components/Webpage View/WebNotes.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from '../Webpage View/WebNotesApp.module.css';\nimport lock from '../../assets/Vector.png';\nimport bgImage from '../../assets/bgimage.png';\nimport createGroupIcon from '../../assets/+.png';\nimport saveIcon from '../../assets/save.png';\nimport Popup from '../Webpage View/Popup';\n\nconst WebNotes= () => {\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [groupName, setGroupName] = useState('');\n  const [selectedColor, setSelectedColor] = useState('#B38BFA');\n  const [noteGroups, setNoteGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [newNoteContent, setNewNoteContent] = useState('');\n  const [selectedGroupIndex, setSelectedGroupIndex] = useState(null);\n\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  const createNotesGroup = () => {\n    if (groupName && selectedColor) {\n      const newNoteGroup = {\n        name: groupName,\n        color: selectedColor,\n        notes: [],\n      };\n\n      // Assign background color based on the first two letters of the group name\n      const bgColor = groupName.substring(0, 2).toUpperCase();\n      newNoteGroup.backgroundColor = bgColor;\n\n      // Create a copy of noteGroups with the new group\n      const updatedNoteGroups = [...noteGroups, newNoteGroup];\n\n      // Update the state with the new array\n      setNoteGroups(updatedNoteGroups);\n\n      closePopup();\n      setGroupName('');\n      setSelectedColor('#B38BFA');\n    }\n  };\n\n\n  const selectGroup = (group, index) => {\n    console.log('Selected Group Index:', index);\n    setSelectedGroup(group);\n    setSelectedGroupIndex(index);\n    updateLocalStorage(noteGroups);\n  };\n\n  const updateLocalStorage = (updatedNoteGroups) => {\n    localStorage.setItem('noteGroups', JSON.stringify(updatedNoteGroups));\n  };\n\n  const createNote = (noteContent) => {\n    if (selectedGroup) {\n      const timestamp = new Date();\n      const formattedTime = timestamp.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n      const formattedDate = timestamp.toLocaleDateString([], {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      });\n      const noteTimestamp = `${formattedTime} <br/> ${formattedDate}`;\n\n      const newNote = {\n        updatedAt: noteTimestamp,\n        content: noteContent,\n      };\n\n      // Create a copy of notes for the selected group with the new note\n      const updatedNotes = [...selectedGroup.notes, newNote];\n\n      // Update the state with the new notes\n      setSelectedGroup({ ...selectedGroup, notes: updatedNotes });\n\n      // Save the updated notes to local storage\n      const updatedNoteGroups = noteGroups.map((group) => {\n        if (group === selectedGroup) {\n          return { ...group, notes: updatedNotes };\n        }\n        return group;\n      });\n\n      // Update noteGroups state and save to local storage\n      setNoteGroups(updatedNoteGroups);\n      updateLocalStorage(updatedNoteGroups);\n    }\n\n    setNewNoteContent(''); // Clear the input field after saving\n  };\n\n  function generateCircleWithInitials(group) {\n    return (\n      <div className={styles.circleWrapper}>\n        <div\n          style={{ backgroundColor: group.color }}\n          className={styles.initialCircle}\n        >\n          {group.name.includes(' ')\n            ? group.name\n                .split(' ')\n                .map((word) => word.slice(0, 1))\n                .join('')\n                .toUpperCase()\n            : group.name.slice(0, 2).toUpperCase()}\n        </div>\n      </div>\n    );\n  }\n\n  const handleNoteSave = () => {\n    if (newNoteContent.trim() !== '') {\n      createNote(newNoteContent); // Call the function to create a new note\n    }\n  };\n\n  return (\n    <div className={styles.chatApp}>\n      <div className={styles.noteGroups}>\n        <div className=\"group-container\">\n          <h1>Pocket Notes</h1>\n          <button className={styles.button} onClick={openPopup}>\n            <img src={createGroupIcon} alt=\"Create Group\" />\n            Create Notes group\n          </button>\n          <ul className={styles.groupList}>\n            {noteGroups.map((group, index) => (\n              <li\n                key={index}\n                className={`${styles.groupItem} ${\n                  index === selectedGroupIndex ? styles.selectedGroup : ''\n                }`}\n                onClick={() => selectGroup(group, index)}\n              >\n                {generateCircleWithInitials(group)}\n                <div className={styles.groupNameTransparent}>{group.name}</div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n      <div className={styles.Content}>\n        {isPopupOpen ? (\n          // Render popup content when isPopupOpen is true\n          <Popup\n            isPopupOpen={isPopupOpen}\n            closePopup={closePopup}\n            groupName={groupName}\n            setGroupName={setGroupName}\n            selectedColor={selectedColor}\n            setSelectedColor={setSelectedColor}\n            createNotesGroup={createNotesGroup}\n          />\n        ) : selectedGroup ? (\n          // Render selected group content when a group is selected\n          <div className={styles.rightContent}>\n            <div className={styles.logo}>\n              {generateCircleWithInitials(selectedGroup)}\n            </div>\n            <h2>{selectedGroup.name}</h2>\n\n\n             \n            <ul className={styles.noteList}>\n              {selectedGroup.notes.map((note, index) => (\n                <li key={index} className={styles.noteItem}>\n                  {note.content}{' '}\n                  <span>\n                    <p dangerouslySetInnerHTML={{ __html: note.updatedAt }}></p>\n                  </span>\n                </li>\n               \n              \n\n              ))}\n            </ul>\n\n\n            <textarea\n              className={styles.noteTextArea}\n              contentEditable=\"true\"\n              placeholder=\"   Enter your text here...........\"\n              value={newNoteContent}\n              onChange={(e) => setNewNoteContent(e.target.value)}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                  e.preventDefault();\n                  handleNoteSave();\n                }\n              }}\n            />\n            <button className={styles.saveButton} onClick={handleNoteSave}>\n              <img src={saveIcon} alt=\"Save Note\" />\n            </button>\n          </div>\n        ) : (\n          // Render default content when neither popup is open nor a group is selected\n          <div className={styles.defaultContent}>\n            <img src={bgImage} alt={bgImage} className={styles.bgImage} />\n            <p className={styles.pocketnotes}>Pocket Notes</p>\n            <p className={styles.description}>\n              Send and receive Texts without keeping your phone online.\n              <br />\n              Use Pocket Notes on up to 4 linked devices and 1 mobile phone\n            </p>\n            <div className={styles.FooterContainer}>\n              <img src={lock} alt=\"lock\" />\n              <p>end-to-end encrypted</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WebNotes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}