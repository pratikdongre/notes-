{"ast":null,"code":"var _jsxFileName = \"/home/prat/Desktop/notes/src/components/Android View/ANotes.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport styles from '../Android View/ANotesApp.module.css';\nimport createGroupIcon from '../../assets/+.png';\nimport saveIcon from '../../assets/save.png';\nimport Popup from '../Android View/Popup';\nimport backArrow from '../../assets/backArrow.png'; // Import your back arrow image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANotes = () => {\n  _s();\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [groupName, setGroupName] = useState('');\n  const [selectedColor, setSelectedColor] = useState('#B38BFA');\n  const [noteGroups, setNoteGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [newNoteContent, setNewNoteContent] = useState('');\n  const [selectedGroupIndex, setSelectedGroupIndex] = useState(null);\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n  const createNotesGroup = () => {\n    if (groupName && selectedColor) {\n      const newNoteGroup = {\n        name: groupName,\n        color: selectedColor,\n        notes: []\n      };\n\n      // Assign background color based on the first two letters of the group name\n      const bgColor = groupName.substring(0, 2).toUpperCase();\n      newNoteGroup.backgroundColor = bgColor;\n\n      // Create a copy of noteGroups with the new group\n      const updatedNoteGroups = [...noteGroups, newNoteGroup];\n\n      // Update the state with the new array\n      setNoteGroups(updatedNoteGroups);\n      closePopup();\n      setGroupName('');\n      setSelectedColor('#B38BFA');\n    }\n  };\n  const selectGroup = (group, index) => {\n    console.log('Selected Group Index:', index);\n    setSelectedGroup(group);\n    setSelectedGroupIndex(index);\n    updateLocalStorage(noteGroups);\n  };\n  const updateLocalStorage = updatedNoteGroups => {\n    localStorage.setItem('noteGroups', JSON.stringify(updatedNoteGroups));\n  };\n  const createNote = noteContent => {\n    if (selectedGroup) {\n      const timestamp = new Date();\n      const formattedTime = timestamp.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n      const formattedDate = timestamp.toLocaleDateString([], {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      const noteTimestamp = `${formattedTime} <br/> ${formattedDate}`;\n      const newNote = {\n        updatedAt: noteTimestamp,\n        content: noteContent\n      };\n\n      // Create a copy of notes for the selected group with the new note\n      const updatedNotes = [...selectedGroup.notes, newNote];\n\n      // Update the state with the new notes\n      setSelectedGroup({\n        ...selectedGroup,\n        notes: updatedNotes\n      });\n\n      // Save the updated notes to local storage\n      const updatedNoteGroups = noteGroups.map(group => {\n        if (group === selectedGroup) {\n          return {\n            ...group,\n            notes: updatedNotes\n          };\n        }\n        return group;\n      });\n\n      // Update noteGroups state and save to local storage\n      setNoteGroups(updatedNoteGroups);\n      updateLocalStorage(updatedNoteGroups);\n    }\n    setNewNoteContent(''); // Clear the input field after saving\n  };\n\n  function generateCircleWithInitials(group) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.circleWrapper,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: group.color\n        },\n        className: styles.initialCircle,\n        children: group.name.includes(' ') ? group.name.split(' ').map(word => word.slice(0, 1)).join('').toUpperCase() : group.name.slice(0, 2).toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n  const handleNoteSave = () => {\n    if (newNoteContent.trim() !== '') {\n      createNote(newNoteContent); // Call the function to create a new note\n    }\n  };\n\n  const handleBackButtonClick = () => {\n    setSelectedGroup(null); // Clear the selected group when the back button is clicked\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.chatApp,\n    children: [selectedGroup === null ?\n    /*#__PURE__*/\n    // Render group name side when selectedGroup is null\n    _jsxDEV(\"div\", {\n      className: styles.noteGroups,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pocket Notes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.button,\n          onClick: openPopup,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: createGroupIcon,\n            alt: \"Create Group\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this), \"Create Notes group\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: styles.groupList,\n          children: noteGroups.map((group, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `${styles.groupItem} ${index === selectedGroupIndex ? styles.selectedGroup : ''}`,\n            onClick: () => selectGroup(group, index),\n            children: [generateCircleWithInitials(group), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.groupNameTransparent,\n              children: group.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }, this) : null, \" \", isPopupOpen ?\n    /*#__PURE__*/\n    // Render popup content when isPopupOpen is true\n    _jsxDEV(Popup, {\n      isPopupOpen: isPopupOpen,\n      closePopup: closePopup,\n      groupName: groupName,\n      setGroupName: setGroupName,\n      selectedColor: selectedColor,\n      setSelectedColor: setSelectedColor,\n      createNotesGroup: createNotesGroup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this) : selectedGroup ?\n    /*#__PURE__*/\n    // Render selected group content when a group is selected\n    _jsxDEV(\"div\", {\n      className: styles.Content,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [selectedGroup.name, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.backArrow,\n          onClick: handleBackButtonClick,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: backArrow,\n            alt: \"Back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.logo,\n          children: generateCircleWithInitials(selectedGroup)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.noteList,\n        children: selectedGroup.notes.map((note, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles.noteItem,\n          children: [note.content, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              dangerouslySetInnerHTML: {\n                __html: note.updatedAt\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: styles.noteTextArea,\n        contentEditable: \"true\",\n        placeholder: \"   Enter your text here...........\",\n        value: newNoteContent,\n        onChange: e => setNewNoteContent(e.target.value),\n        onKeyPress: e => {\n          if (e.key === !e.enter) {\n            e.preventDefault();\n            handleNoteSave();\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.saveButton,\n        onClick: handleNoteSave,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: saveIcon,\n          alt: \"Save Note\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }, this) : null, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(ANotes, \"cVNu/+0IQO6E05TK1r8YIYyFPoM=\");\n_c = ANotes;\nexport default ANotes;\nvar _c;\n$RefreshReg$(_c, \"ANotes\");","map":{"version":3,"names":["React","useState","styles","createGroupIcon","saveIcon","Popup","backArrow","jsxDEV","_jsxDEV","ANotes","_s","isPopupOpen","setIsPopupOpen","groupName","setGroupName","selectedColor","setSelectedColor","noteGroups","setNoteGroups","selectedGroup","setSelectedGroup","newNoteContent","setNewNoteContent","selectedGroupIndex","setSelectedGroupIndex","openPopup","closePopup","createNotesGroup","newNoteGroup","name","color","notes","bgColor","substring","toUpperCase","backgroundColor","updatedNoteGroups","selectGroup","group","index","console","log","updateLocalStorage","localStorage","setItem","JSON","stringify","createNote","noteContent","timestamp","Date","formattedTime","toLocaleTimeString","hour","minute","formattedDate","toLocaleDateString","year","month","day","noteTimestamp","newNote","updatedAt","content","updatedNotes","map","generateCircleWithInitials","className","circleWrapper","children","style","initialCircle","includes","split","word","slice","join","fileName","_jsxFileName","lineNumber","columnNumber","handleNoteSave","trim","handleBackButtonClick","chatApp","button","onClick","src","alt","groupList","groupItem","groupNameTransparent","Content","logo","noteList","note","noteItem","dangerouslySetInnerHTML","__html","noteTextArea","contentEditable","placeholder","value","onChange","e","target","onKeyPress","key","enter","preventDefault","saveButton","_c","$RefreshReg$"],"sources":["/home/prat/Desktop/notes/src/components/Android View/ANotes.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from '../Android View/ANotesApp.module.css';\nimport createGroupIcon from '../../assets/+.png';\nimport saveIcon from '../../assets/save.png';\nimport Popup from '../Android View/Popup';\nimport backArrow from '../../assets/backArrow.png'; // Import your back arrow image\n\nconst ANotes = () => {\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [groupName, setGroupName] = useState('');\n  const [selectedColor, setSelectedColor] = useState('#B38BFA');\n  const [noteGroups, setNoteGroups] = useState([]);\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [newNoteContent, setNewNoteContent] = useState('');\n  const [selectedGroupIndex, setSelectedGroupIndex] = useState(null);\n\n  const openPopup = () => {\n    setIsPopupOpen(true);\n  };\n\n  const closePopup = () => {\n    setIsPopupOpen(false);\n  };\n\n  const createNotesGroup = () => {\n    if (groupName && selectedColor) {\n      const newNoteGroup = {\n        name: groupName,\n        color: selectedColor,\n        notes: [],\n      };\n\n      // Assign background color based on the first two letters of the group name\n      const bgColor = groupName.substring(0, 2).toUpperCase();\n      newNoteGroup.backgroundColor = bgColor;\n\n      // Create a copy of noteGroups with the new group\n      const updatedNoteGroups = [...noteGroups, newNoteGroup];\n\n      // Update the state with the new array\n      setNoteGroups(updatedNoteGroups);\n\n      closePopup();\n      setGroupName('');\n      setSelectedColor('#B38BFA');\n    }\n  };\n\n  const selectGroup = (group, index) => {\n    console.log('Selected Group Index:', index);\n    setSelectedGroup(group);\n    setSelectedGroupIndex(index);\n    updateLocalStorage(noteGroups);\n  };\n\n  const updateLocalStorage = (updatedNoteGroups) => {\n    localStorage.setItem('noteGroups', JSON.stringify(updatedNoteGroups));\n  };\n\n  const createNote = (noteContent) => {\n    if (selectedGroup) {\n      const timestamp = new Date();\n      const formattedTime = timestamp.toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit',\n      });\n      const formattedDate = timestamp.toLocaleDateString([], {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n      });\n      const noteTimestamp = `${formattedTime} <br/> ${formattedDate}`;\n\n      const newNote = {\n        updatedAt: noteTimestamp,\n        content: noteContent,\n      };\n\n      // Create a copy of notes for the selected group with the new note\n      const updatedNotes = [...selectedGroup.notes, newNote];\n\n      // Update the state with the new notes\n      setSelectedGroup({ ...selectedGroup, notes: updatedNotes });\n\n      // Save the updated notes to local storage\n      const updatedNoteGroups = noteGroups.map((group) => {\n        if (group === selectedGroup) {\n          return { ...group, notes: updatedNotes };\n        }\n        return group;\n      });\n\n      // Update noteGroups state and save to local storage\n      setNoteGroups(updatedNoteGroups);\n      updateLocalStorage(updatedNoteGroups);\n    }\n\n    setNewNoteContent(''); // Clear the input field after saving\n  };\n\n  function generateCircleWithInitials(group) {\n    return (\n      <div className={styles.circleWrapper}>\n        <div\n          style={{ backgroundColor: group.color }}\n          className={styles.initialCircle}\n        >\n          {group.name.includes(' ')\n            ? group.name\n                .split(' ')\n                .map((word) => word.slice(0, 1))\n                .join('')\n                .toUpperCase()\n            : group.name.slice(0, 2).toUpperCase()}\n        </div>\n      </div>\n    );\n  }\n\n  const handleNoteSave = () => {\n    if (newNoteContent.trim() !== '') {\n      createNote(newNoteContent); // Call the function to create a new note\n    }\n  };\n\n  const handleBackButtonClick = () => {\n    setSelectedGroup(null); // Clear the selected group when the back button is clicked\n  };\n  \n  return (\n    <div className={styles.chatApp}>\n      {selectedGroup === null ? ( // Render group name side when selectedGroup is null\n        <div className={styles.noteGroups}>\n          <div className=\"group-container\">\n            <h1>Pocket Notes</h1>\n            <button className={styles.button} onClick={openPopup}>\n              <img src={createGroupIcon} alt=\"Create Group\" />\n              Create Notes group\n            </button>\n            <ul className={styles.groupList}>\n              {noteGroups.map((group, index) => (\n                <li\n                  key={index}\n                  className={`${styles.groupItem} ${\n                    index === selectedGroupIndex ? styles.selectedGroup : ''\n                  }`}\n                  onClick={() => selectGroup(group, index)}\n                >\n                  {generateCircleWithInitials(group)}\n                  <div className={styles.groupNameTransparent}>{group.name}</div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      ) : null} {/* <- Render nothing when selectedGroup is not null */}\n\n      {isPopupOpen ? (\n        // Render popup content when isPopupOpen is true\n        <Popup\n          isPopupOpen={isPopupOpen}\n          closePopup={closePopup}\n          groupName={groupName}\n          setGroupName={setGroupName}\n          selectedColor={selectedColor}\n          setSelectedColor={setSelectedColor}\n          createNotesGroup={createNotesGroup}\n        />\n      ) : selectedGroup ? (\n        // Render selected group content when a group is selected\n        <div className={styles.Content}>\n          \n          <h2>{selectedGroup.name}\n\n          <div className={styles.backArrow} onClick={handleBackButtonClick}>\n            <img src={backArrow} alt=\"Back\" />\n          </div>\n          <div className={styles.logo}>\n            {generateCircleWithInitials(selectedGroup)}\n          </div></h2>\n          <ul className={styles.noteList}>\n            {selectedGroup.notes.map((note, index) => (\n              <li key={index} className={styles.noteItem}>\n                {note.content}{' '}\n                <span>\n                  <p dangerouslySetInnerHTML={{ __html: note.updatedAt }}></p>\n                </span>\n              </li>\n            ))}\n          </ul>\n          <textarea\n            className={styles.noteTextArea}\n            contentEditable=\"true\"\n            placeholder=\"   Enter your text here...........\"\n            value={newNoteContent}\n            onChange={(e) => setNewNoteContent(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === !e.enter) {\n                e.preventDefault();\n                handleNoteSave();\n              }\n            }}\n          />\n          <button className={styles.saveButton} onClick={handleNoteSave}>\n            <img src={saveIcon} alt=\"Save Note\" />\n          </button>\n        </div>\n      ) : null} {/* <- Render nothing when selectedGroup is null */}\n    </div>\n  );\n};\n\nexport default ANotes;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}